// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  MASTER
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  ORDERED
  PENDING_CANCELLATION
  CANCELLED
}

enum PaymentStatus {
  DUE
  FAILED
  SUCCESSFUL
  REFUNDED
}

enum SaleType {
  REGULAR
  FLASH
}

model User {
  id                       String    @id @default(uuid())
  name                     String
  email                    String    @unique
  emailVerified            Boolean   @default(false)
  password                 String
  role                     Role      @default(USER)
  defaultShippingAddressId String?
  defaultBillingAddressId  String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  deletedAt                DateTime?
  addresses                Address[]
  cart                     Cart?
  orders                   Order[]
  reviews                  Review[]
  product                  Product[]

  @@fulltext([name, email])
  @@map("users")
}

model Address {
  id             String    @id @default(uuid())
  name           String
  lineOne        String
  lineTwo        String?
  city           String
  pincode        String
  state          String
  country        String
  email          String
  phone          String
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  shippingOrders Order[]   @relation("ShippingAddress")
  billingOrders  Order[]   @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id       String             @id @default(uuid())
  name     String             @unique
  products Product[]
  discount CategoryDiscount[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@fulltext([name])
  @@map("categories")
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]

  @@fulltext([name])
  @@map("tags")
}

model Product {
  id          String            @id @default(uuid())
  name        String
  description String            @db.Text
  categoryId  String
  category    Category          @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  reviews     Review[]
  images      ProductImage[]
  variants    ProductVariant[]
  discount    ProductDiscount[]
  createdBy   String
  user        User              @relation(fields: [createdBy], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@fulltext([name, description])
  @@map("products")
}

model ProductVariant {
  id        String      @id @default(uuid())
  sku       String      @unique
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  size      String
  price     Decimal
  stock     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  cartItem  CartItem[]
  orderItem OrderItem[]

  @@unique([productId, size])
  @@map("product_variants")
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id               String         @id @default(uuid())
  cartId           String
  cart             Cart           @relation(fields: [cartId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([cartId, productVariantId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(uuid())
  razorpayId        String        @unique
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
  totalAmount       Decimal
  status            OrderStatus   @default(PENDING)
  payment           PaymentStatus @default(DUE)
  shippingAddressId String
  billingAddressId  String
  shippingAddress   Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  @@map("orders")
}

model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Int
  price            Decimal
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("order_items")
}

model Review {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("reviews")
}

model CategoryDiscount {
  id         String    @id @default(uuid())
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  discount   Decimal
  type       SaleType
  validFrom  DateTime
  validTo    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@map("category_discounts")
}

model ProductDiscount {
  id        String    @id @default(uuid())
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  discount  Decimal
  type      SaleType
  validFrom DateTime
  validTo   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("product_discounts")
}
